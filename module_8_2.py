def personal_sum(numbers):
    result = 0 # переменная для подсчёта суммы чисел
    incorrect_data = 0 # переменная для подсчёта колличества некорректных данных
    for i in numbers: # цикл перебора значений i numbers
        # блок проверки на ошибки
        try: # проверка на ошибки
            result += i # вычисление суммы чисел в numbers
        # блок подсчета ошибок типа данных
        except TypeError: # подсчет ошибок типа данных
            # подсчет количества выявленых ошибок типов данных
            incorrect_data += 1 # подсчет количества выявленых ошибок типов данных
            print(f'Некорректный тип данных для подсчёта суммы - {i}')
    return (result, incorrect_data) # возврат полученных результатов в виде кортежа

def calculate_average(numbers):
    try: # проверка на ошибки вычислений
        per_sum = personal_sum(numbers) # обращение к данным функции personal_sum()(кортеж)
        average = per_sum[0] / (len(numbers) - per_sum[1]) # подсчет среднего арифметического (average)
        # через индексы кортежа per_sum (сумма всех данных делённая на их количество.)
        return average # возврат avg
    except ZeroDivisionError: # обработка ошиибок деления на 0
        return 0 # возврат значения 0
    except TypeError: # обработка ошибок типа данных (может быть записана не коллекция, а другие типы
        # данных, например числа)
        print('В numbers записан некорректный тип данных')
        return None # возврат None

print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается (сначала 1, далее ",", пробел и т.д.)
# , но каждый символ - строковый тип (Результат 1: 0)
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3 (Результат 2: 2.0)
print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция (Результат 3: None)
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать (Результат 4: 26.5)